class Snake {
field int x, y;
field int size;
field boolen over;

    constructor Snake new(int Ax, int Ay, int Asize) {
        let x = Ax;
        let y = Ay;
        let size = Asize;
        do draw();
        return this;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
    method void draw() {
        do Screen.setColor(true);
        do Screen.drawRectangle(x, y, x + size, y + size);
        return;
    }
    method void erace() {
        do Screen.setColor(false);
        do Screen.drawRectangle(x, y, x + size, y + size);
        return;
    }
    method void moveUp() {
        if (y > 1) {
            do Screen.setColor(false);
            do Screen.drawRectangle(x, y, x + size, y + size);
            let y = y - 2;
            do Screen.setColor(true);
            do Screen.drawRectangle(x, y, x + size, y + size);
        }
        return;
    }
    method void moveRight() {
        if ((x + size) < 510 ) {
            do Screen.setColor(false);
            do Screen.drawRectangle(x, y, x + size, y + size);
            let x = x + 2;
            do Screen.setColor(true);
            do Screen.drawRectangle(x, y, x + size, y + size);
        }
        return;
    }
    method void moveDown() {
        if ((y + size) < 510) {
            do Screen.setColor(false);
            do Screen.drawRectangle(x, y, x + size, y + size);
            let y = y + 2;
            do Screen.setColor(true);
            do Screen.drawRectangle(x, y, x + size, y + size);
        }
        return;
    }
    method void moveLeft() {
        if (x > 1) {
            do Screen.setColor(false);
            do Screen.drawRectangle(x, y, x + size, y + size);
            let x = x - 2;
            do Screen.setColor(true);
            do Screen.drawRectangle(x, y, x + size, y + size);
        }
        return;
    }

    method boolean over() {
        if (x < 1 | y < 1 | (x + size) > 510 | (y + size) > 510) {
            let over = true;
        }
        return over;
    }

    method int posX() {
        return x;
    }

    method int posY() {
        return y;
    }

}
