// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;
    static boolean color;
    static boolean white, black;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let color = true;
        let white = false;
        let black = true;
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        // 16384 to 24575
        var int i;
        let i = 16384;
        while(i < 24576){
            let screen[i] = white;
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, i, target;
        var Array value;
        let address = (32*y) + (x/16);
        let value = Memory.peek(16384 + address);
        // set (x % 16)th bit of value to the current color
        let i = x- ((x/16)*16);

        if (color) {
            let value = value | twoToThe[i];
        } else {
            let value = value & ~(twoToThe[i]);
        }
        do Memory.poke(16384 + address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {

        if (x1 = x2) {
            do Screen.drawVerticalLine(x1, y1, y2);
        }
        if (y1 = y2) {
            do Screen.drawHorizontalLine(x1, x2, y1);
        }
        else {
            if (y2 > y1) {
                do Screen.drawRightUpLine(x1, y1, x2, y2);
            } else {
                do Screen.drawRightDownLine(x1, y1, x2, y2);
            }
        }
        return;
    }

    function void drawVerticalLine(int x1, int y1, int y2){
        var int y, dy;
        var int a;

        if (y2 < y1) {
            let y = y2;
            let dy = y1 - y2;
        } else {
            let y = y1;
            let dy = y2 - y1;
        }

        let a = 0;
        while (~(a > dy)){
            do Screen.drawPixel(x1, y + a);
            let a = a + 1;
        }
        return;
    }

    function void drawHorizontalLine(int x1, int x2, int y1){
        var int x, dx;
        var int a;

        if (x2 < x1) {
            let x = x2;
            let dx = x1 - x2;
        } else {
            let x = x1;
            let dx = x2 - x1;
        }

        let a = 0;
        while (~(a > dx)){
            do Screen.drawPixel(x + a, y1);
            let a = a + 1;
        }
        return;
    }

    function void drawRightUpLine(int x1, int y1, int x2, int y2) {
        var int x, y, dx, dy;
        var int a, b, diff;

        if (x1 > x2){
            let x = x2;
            let dx = x1 - x2;
        } else {
            let x = x1;
            let dx = x2 - x1;
        }
        let a = 0;
        let b = 0;
        let dy = y2 - y1;

        while (~(a > dx) & ~(b > dy)){
            do Screen.drawPixel(x+a, y+b);
            let diff = (a*dy) - (b*dx);
            if (diff < 0){
                let a = a + 1;
                let diff = diff + dy;
            } else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }
        return;
    }

    function void drawRightDownLine(int x1, int y1, int x2, int y2) {
        var int x, y, dx, dy;
        var int a, b, diff;

        if (x1 > x2){
            let x = x2;
            let dx = x1 - x2;
        } else {
            let x = x1;
            let dx = x2 - x1;
        }
        let a = 0;
        let b = 0;
        let dy = y2 - y1;

        while (~(a > dx) & ~(b < dy)){
            do Screen.drawPixel(x+a, y+b);
            let diff = (a*dy) - (b*dx);
            if (diff > 0){
                let a = a + 1;
                let diff = diff + dy;
            } else {
                let b = b - 1;
                let diff = diff + dx;
            }
        }
        return;
    }


    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int a, dy;
        let dy = y1 - y2;
        let a = 0;
        while (~(a > dy)){
            do Screen.drawHorizontalLine(x1, x2, y1 + a);
            let a = a + 1;
            let dy = dy - 1;
        }
    return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, square;
        let dy = -r;
        let square = Math.sqrt((r*r) - (dy*dy));
        while (dy < r) {
            do Screen.drawLine(x-square, y + dy, x+ square, y+dy);
            let dy = dy + 1;
        }
    return;
    }
}
